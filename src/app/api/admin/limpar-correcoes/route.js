import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "../../auth/[...nextauth]/route";
import prisma from "@/lib/db.js";

export async function GET(request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return new Response(`
        <html>
          <body style="font-family: Arial, sans-serif; padding: 20px;">
            <h2>‚ùå Acesso Negado</h2>
            <p>Voc√™ precisa estar logado para acessar esta funcionalidade.</p>
            <a href="/auth/signin">Fazer Login</a>
          </body>
        </html>
      `, {
        headers: { 'Content-Type': 'text/html' }
      });
    }

    // Verificar se foi solicitada a limpeza
    const url = new URL(request.url);
    const confirmar = url.searchParams.get('confirmar');
    
    if (confirmar === 'sim') {
      console.log('üßπ Iniciando limpeza das corre√ß√µes de teste...');
      
      // Contar corre√ß√µes antes
      const totalAntes = await prisma.correcaoItem.count();
      console.log(`üìä Total de corre√ß√µes encontradas: ${totalAntes}`);
      
      // Deletar todas as corre√ß√µes
      const resultado = await prisma.correcaoItem.deleteMany({});
      
      console.log(`‚úÖ ${resultado.count} corre√ß√µes removidas com sucesso!`);
      
      return new Response(`
        <html>
          <body style="font-family: Arial, sans-serif; padding: 20px;">
            <h2>‚úÖ Limpeza Conclu√≠da!</h2>
            <p><strong>${resultado.count}</strong> corre√ß√µes foram removidas com sucesso.</p>
            <p>üìã Os dados originais dos itens foram preservados.</p>
            <a href="/api/admin/limpar-correcoes" style="color: blue;">‚Üê Voltar</a>
          </body>
        </html>
      `, {
        headers: { 'Content-Type': 'text/html' }
      });
    }

    // Mostrar p√°gina de confirma√ß√£o
    const totalCorrecoes = await prisma.correcaoItem.count();
    
    return new Response(`
      <html>
        <body style="font-family: Arial, sans-serif; padding: 20px;">
          <h2>üßπ Limpeza de Corre√ß√µes de Teste</h2>
          <p><strong>Usu√°rio:</strong> ${session.user.name || session.user.email}</p>
          <p><strong>Corre√ß√µes encontradas:</strong> ${totalCorrecoes}</p>
          
          ${totalCorrecoes > 0 ? `
            <div style="background: #fff3cd; border: 1px solid #ffeeba; padding: 15px; border-radius: 5px; margin: 20px 0;">
              <h3>‚ö†Ô∏è Aten√ß√£o</h3>
              <p>Esta a√ß√£o ir√° <strong>deletar TODAS as ${totalCorrecoes} corre√ß√µes</strong> do banco de dados.</p>
              <p>‚úÖ Os dados originais dos itens <strong>N√ÉO ser√£o afetados</strong>.</p>
              <p>‚ùå Esta a√ß√£o <strong>n√£o pode ser desfeita</strong>.</p>
            </div>
            
            <a href="/api/admin/limpar-correcoes?confirmar=sim" 
               onclick="return confirm('Tem certeza que deseja deletar todas as corre√ß√µes?')"
               style="background: #dc3545; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
              üóëÔ∏è Confirmar Limpeza
            </a>
          ` : `
            <div style="background: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 5px;">
              <p>‚úÖ Nenhuma corre√ß√£o encontrada para limpar.</p>
            </div>
          `}
          
          <p style="margin-top: 30px;">
            <a href="/" style="color: blue;">‚Üê Voltar ao Sistema</a>
          </p>
        </body>
      </html>
    `, {
      headers: { 'Content-Type': 'text/html' }
    });

  } catch (error) {
    console.error("‚ùå Erro ao acessar limpeza:", error);
    return new Response(`
      <html>
        <body style="font-family: Arial, sans-serif; padding: 20px;">
          <h2>‚ùå Erro</h2>
          <p>Erro interno do servidor: ${error.message}</p>
        </body>
      </html>
    `, {
      headers: { 'Content-Type': 'text/html' }
    });
  }
}

export async function DELETE(request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json(
        { error: "N√£o autorizado" },
        { status: 401 }
      );
    }

    console.log('üßπ Iniciando limpeza das corre√ß√µes de teste...');
    
    // Contar corre√ß√µes antes
    const totalAntes = await prisma.correcaoItem.count();
    console.log(`üìä Total de corre√ß√µes encontradas: ${totalAntes}`);
    
    // Deletar todas as corre√ß√µes
    const resultado = await prisma.correcaoItem.deleteMany({});
    
    console.log(`‚úÖ ${resultado.count} corre√ß√µes removidas com sucesso!`);
    
    return NextResponse.json({
      success: true,
      message: `${resultado.count} corre√ß√µes removidas com sucesso!`,
      totalAntes,
      totalRemovidas: resultado.count
    });

  } catch (error) {
    console.error("‚ùå Erro ao limpar corre√ß√µes:", error);
    return NextResponse.json(
      { error: "Erro interno do servidor" },
      { status: 500 }
    );
  }
}