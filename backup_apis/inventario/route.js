import { getServerSession } from "next-auth/next";
import { authOptions } from "../auth/[...nextauth]/route";
import { NextResponse } from "next/server";
import {
  InventarioService,
  ItemInventarioService,
  PermissaoService,
  AuditoriaService,
} from "../../../lib/services.js";

export async function GET(request) {
  // Verificar autentica√ß√£o
  const session = await getServerSession(authOptions);

  if (!session) {
    return NextResponse.json(
      { error: "Acesso negado. Usu√°rio n√£o autenticado." },
      { status: 401 }
    );
  }

  const { searchParams } = new URL(request.url);
  const nomeInventario = searchParams.get("inventario");
  const tombo = searchParams.get("tombo");

  if (!nomeInventario) {
    return NextResponse.json(
      { error: "Par√¢metro 'inventario' √© obrigat√≥rio." },
      { status: 400 }
    );
  }

  try {
    // Buscar invent√°rio no banco de dados
    const inventario = await InventarioService.findByName(nomeInventario);

    if (!inventario) {
      return NextResponse.json(
        { error: "Invent√°rio n√£o encontrado." },
        { status: 404 }
      );
    }

    // Verificar permiss√µes de acesso ao invent√°rio
    const hasAccess = await PermissaoService.canAccessInventario(
      session.user.email,
      inventario.nome
    );

    if (!hasAccess) {
      return NextResponse.json(
        {
          error:
            "Acesso negado. Voc√™ n√£o tem permiss√£o para acessar este invent√°rio.",
        },
        { status: 403 }
      );
    }

    // Se foi solicitado um tombo espec√≠fico, buscar apenas esse item
    if (tombo) {
      console.log(
        `üîç Buscando item com tombo: ${tombo} no invent√°rio: ${nomeInventario}`
      );

      const item = await ItemInventarioService.findByNumero(
        nomeInventario,
        tombo
      );

      if (!item) {
        console.log(
          `‚ùå Item com tombo ${tombo} n√£o encontrado no invent√°rio ${nomeInventario}`
        );
        return NextResponse.json(
          { error: "Item n√£o encontrado." },
          { status: 404 }
        );
      }

      console.log(`‚úÖ Item encontrado:`, item);

      // Registrar acesso ao item no log de auditoria
      await AuditoriaService.log(
        "search_item",
        session.user,
        { tombo: tombo },
        inventario.nome
      );

      return NextResponse.json(item);
    }

    // Retornar todos os itens do invent√°rio
    const itens = await ItemInventarioService.listByInventario(inventario.nome);

    // Registrar acesso ao invent√°rio no log de auditoria
    await AuditoriaService.log(
      "view_inventory",
      session.user,
      { total_items: itens.length },
      inventario.nome
    );

    return NextResponse.json(itens);
  } catch (error) {
    console.error("Erro ao buscar invent√°rio:", error);
    return NextResponse.json(
      { error: "Erro interno do servidor." },
      { status: 500 }
    );
  }
}
